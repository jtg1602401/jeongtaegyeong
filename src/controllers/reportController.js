const pool = require("../../config/db3.js");

exports.getReports = async (req, res) => {
    try {
        console.log("[GET] /reports ÏöîÏ≤≠: userId =", req.params.userId);

        const { sort } = req.query;
        const parsedUserId = parseInt(req.params.userId, 10); // URL Í≤ΩÎ°úÏóêÏÑú userId Î∞õÍ∏∞

        if (!parsedUserId || isNaN(parsedUserId)) {
            console.error("ÏûòÎ™ªÎêú userId ÏûÖÎ†•:", req.params.userId);
            return res.status(400).json({ success: false, message: "ÏûòÎ™ªÎêú userId ÏûÖÎ†•ÏûÖÎãàÎã§." });
        }

        // Í∏∞Î≥∏ Ï†ïÎ†¨ ÏàúÏÑú: Ïò§ÎûòÎêú Ïàú (`ASC`)
        let orderBy = "ASC";
        if (sort && sort.toLowerCase() === "desc") {
            orderBy = "DESC"; // ÏµúÏã† ÎÇ†Ïßú (`DESC`) Ï†ïÎ†¨
        }

        console.log(`üîµ MySQL ÏøºÎ¶¨ Ïã§Ìñâ Ï§ë... Ï†ïÎ†¨ Î∞©Ïãù: ${orderBy}`);
        const [feedbacks] = await pool.query(
            `SELECT e.user_id, DATE_FORMAT(e.date, '%Y-%m-%d') AS date, 
                    em.feedback, em.joy, em.sadness, em.anger, em.anxiety, em.satisfaction  
             FROM Experiences e  
             JOIN Emotions em ON e.experience_id = em.experience_id  
             WHERE e.user_id = ?
             ORDER BY e.date ${orderBy}`, 
            [parsedUserID]
        );

        console.log("MySQL ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:", feedbacks);

        if (feedbacks.length === 0) {
            console.warn("Ìï¥Îãπ ÏÇ¨Ïö©ÏûêÏùò ÌîºÎìúÎ∞±Ïù¥ ÏóÜÏäµÎãàÎã§.");
            return res.json({ success: false, message: "Ìï¥Îãπ ÏÇ¨Ïö©ÏûêÏùò ÌîºÎìúÎ∞±Ïù¥ ÏóÜÏäµÎãàÎã§." });
        }

        // summary ÌïÑÎìú Ï∂îÍ∞Ä (Í∞ÄÏû• ÎÜíÏùÄ Í∞êÏ†ïÍ∞íÏóê Îî∞Îùº ÏöîÏïΩ)
        const summarizedFeedbacks = feedbacks.map(fb => {
            const emotions = {
                "Ï¢ãÏùÄ ÌïòÎ£®ÏòÄÎÑ§Ïöî!": fb.joy,
                "Ïä¨Ìîà ÌïòÎ£®ÏòÄÎÑ§Ïöî": fb.sadness,
                "ÌôîÎÇòÎäî ÌïòÎ£®ÏòÄÎÑ§Ïöî": fb.anger,
                "Î∂àÏïàÌïú ÌïòÎ£®ÏòÄÎÑ§Ïöî": fb.anxiety,
                "ÎßåÏ°±Ïä§Îü¨Ïö¥ ÌïòÎ£®ÏòÄÎÑ§Ïöî": fb.satisfaction
            };

            // Í∞êÏ†ïÍ∞íÏù¥ 0Ïù¥ ÏïÑÎãå Í≤ÉÎì§ Ï§ë Í∞ÄÏû• ÎÜíÏùÄ Í∞êÏ†ï Ï∞æÍ∏∞
            let maxEmotion = Object.entries(emotions)
                .filter(([_, value]) => value > 0)  // 0Ïù¥ ÏïÑÎãå Í∞íÎßå ÌïÑÌÑ∞ÎßÅ
                .sort((a, b) => b[1] - a[1]);  // Í∞í Í∏∞Ï§ÄÏúºÎ°ú ÎÇ¥Î¶ºÏ∞®Ïàú Ï†ïÎ†¨

            // Í∞êÏ†ïÏùÑ ÌëúÌòÑÌï† Ïàò ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ Î©îÏãúÏßÄ Ï∂úÎ†•
            const summary = maxEmotion.length > 0 ? maxEmotion[0][0] : "Ïò§Îäò ÌïòÎ£®Î•º ÌëúÌòÑÌï† Ïàò ÏûàÎäî Í∞êÏ†ïÏù¥ ÏóÜÏñ¥Ïöî";

            return {
                user_id: fb.user_id,
                date: fb.date,
                feedback: fb.feedback,
                summary
            };
        });

        res.json({
            success: true,
            userId: parsedUserId,
            feedbacks: summarizedFeedbacks
        });
    } catch (error) {
        console.error("MySQL Ïò§Î•ò Î∞úÏÉù:", error);
        res.status(500).json({ success: false, message: "Internal Server Error" });
    }
};




exports.getReportDetails = async (req, res) => {
    try {
        console.log("[GET] /reports/detail ÏöîÏ≤≠: userId =", req.params.userId);

        const parsedUserId = parseInt(req.params.userId, 10);

        if (!parsedUserId || isNaN(parsedUserId)) {
            console.error("ÏûòÎ™ªÎêú userId ÏûÖÎ†•:", req.params.userId);
            return res.status(400).json({ message: "ÏûòÎ™ªÎêú userId ÏûÖÎ†•ÏûÖÎãàÎã§." });
        }

        console.log(`MySQL ÏøºÎ¶¨ Ïã§Ìñâ Ï§ë...`);
        const [goals] = await pool.query(
            `SELECT start_date, progress FROM Goals WHERE user_id = ?`,  // start_date, progress Ï°∞Ìöå
            [parsedUserId]
        );

        const [emotions] = await pool.query(
            `SELECT e.date, em.joy, em.sadness, em.anger, em.anxiety, em.satisfaction  
             FROM Experiences e  
             JOIN Emotions em ON e.experience_id = em.experience_id  
             WHERE e.user_id = ?`,
            [parsedUserId]
        );

        console.log("üü° MySQL ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:", goals, emotions);

        if (goals.length === 0 && emotions.length === 0) {
            console.warn("Ìï¥Îãπ ÏÇ¨Ïö©ÏûêÏùò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.");
            return res.json({ message: "Ìï¥Îãπ ÏÇ¨Ïö©ÏûêÏùò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§." });
        }

        // ÌòÑÏû¨ ÎÇ†Ïßú Ï†ïÎ≥¥
        const today = new Date();
        const currentYear = today.getFullYear();
        const currentMonth = today.getMonth(); // 0 (Jan) ~ 11 (Dec)

        let totalWeeklyProgress = 0, weeklyGoalCount = 0;
        let totalMonthlyProgress = 0, monthlyGoalCount = 0;

        let weeklyEmotions = { joy: 0, sadness: 0, anger: 0, anxiety: 0, satisfaction: 0 };
        let monthlyEmotions = { joy: 0, sadness: 0, anger: 0, anxiety: 0, satisfaction: 0 };

        let weeklyEmotionTotal = 0;
        let monthlyEmotionTotal = 0;

        // ÏßÑÌñâÎ•† Í≥ÑÏÇ∞
        goals.forEach(row => {
            const startDate = new Date(row.start_date);
            const weeksElapsed = Math.floor((today - startDate) / (7 * 24 * 60 * 60 * 1000)) + 1;
            const isThisWeek = weeksElapsed === 1;
            const isThisMonth = (startDate.getFullYear() === currentYear && startDate.getMonth() === currentMonth);

            if (isThisWeek) {
                totalWeeklyProgress += row.progress;
                weeklyGoalCount++;
            }
            if (isThisMonth) {
                totalMonthlyProgress += row.progress;
                monthlyGoalCount++;
            }
        });

        // Í∞êÏ†ïÍ∞í Í≥ÑÏÇ∞
        emotions.forEach(row => {
            const emotionDate = new Date(row.date);
            const weeksElapsed = Math.floor((today - emotionDate) / (7 * 24 * 60 * 60 * 1000)) + 1;
            const isThisWeek = weeksElapsed === 1;
            const isThisMonth = (emotionDate.getFullYear() === currentYear && emotionDate.getMonth() === currentMonth);

            if (isThisWeek) {
                weeklyEmotions.joy += row.joy;
                weeklyEmotions.sadness += row.sadness;
                weeklyEmotions.anger += row.anger;
                weeklyEmotions.anxiety += row.anxiety;
                weeklyEmotions.satisfaction += row.satisfaction;
                weeklyEmotionTotal += row.joy + row.sadness + row.anger + row.anxiety + row.satisfaction;
            }

            if (isThisMonth) {
                monthlyEmotions.joy += row.joy;
                monthlyEmotions.sadness += row.sadness;
                monthlyEmotions.anger += row.anger;
                monthlyEmotions.anxiety += row.anxiety;
                monthlyEmotions.satisfaction += row.satisfaction;
                monthlyEmotionTotal += row.joy + row.sadness + row.anger + row.anxiety + row.satisfaction;
            }
        });

        // ÌèâÍ∑† ÏßÑÌñâÎ•† Í≥ÑÏÇ∞ (ÏÜåÏàòÏ†ê ÏóÜÏù¥ Î∞òÏò¨Î¶º)
        const averageWeeklyProgress = weeklyGoalCount > 0 ? Math.round(totalWeeklyProgress / weeklyGoalCount) : 0;
        const averageMonthlyProgress = monthlyGoalCount > 0 ? Math.round(totalMonthlyProgress / monthlyGoalCount) : 0;

        // Í∞êÏ†ï Î∞±Î∂ÑÏú® Í≥ÑÏÇ∞
        const calculatePercentage = (emotionCount, totalCount) => {
            return totalCount > 0 ? Math.round((emotionCount / totalCount) * 100) : 0;
        };

        const weeklyEmotionPercentages = {
            joy: calculatePercentage(weeklyEmotions.joy, weeklyEmotionTotal),
            sadness: calculatePercentage(weeklyEmotions.sadness, weeklyEmotionTotal),
            anger: calculatePercentage(weeklyEmotions.anger, weeklyEmotionTotal),
            anxiety: calculatePercentage(weeklyEmotions.anxiety, weeklyEmotionTotal),
            satisfaction: calculatePercentage(weeklyEmotions.satisfaction, weeklyEmotionTotal),
        };

        const monthlyEmotionPercentages = {
            joy: calculatePercentage(monthlyEmotions.joy, monthlyEmotionTotal),
            sadness: calculatePercentage(monthlyEmotions.sadness, monthlyEmotionTotal),
            anger: calculatePercentage(monthlyEmotions.anger, monthlyEmotionTotal),
            anxiety: calculatePercentage(monthlyEmotions.anxiety, monthlyEmotionTotal),
            satisfaction: calculatePercentage(monthlyEmotions.satisfaction, monthlyEmotionTotal),
        };

        //ÌïòÎÇòÏùò APIÎ°ú ÌÜµÌï©Îêú Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
        res.json({
            total_weekly_progress: totalWeeklyProgress,
            weekly_goal_count: weeklyGoalCount,
            average_weekly_progress: averageWeeklyProgress,
            total_monthly_progress: totalMonthlyProgress,
            monthly_goal_count: monthlyGoalCount,
            average_monthly_progress: averageMonthlyProgress,
            weekly_emotions: weeklyEmotionPercentages,
            monthly_emotions: monthlyEmotionPercentages
        });
    } catch (error) {
        console.error("MySQL Ïò§Î•ò Î∞úÏÉù:", error);
        res.status(500).json({ message: "Internal Server Error" });
    }
};

